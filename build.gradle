plugins {
    id("java-library")
    id("maven-publish")
    id("signing")
    id "me.champeau.gradle.jmh" version "0.5.3"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

// -Prelease=true will render a non-snapshot version
// All other values (including unset) will render a snapshot version.
def release = findProperty("release")
version = project.findProperty("version")

if (!release) {
    version += "-SNAPSHOT"
}
group = "com.newrelic.opentracing"

dependencies {
    implementation("io.opentracing:opentracing-api:0.33.0")
    implementation("io.opentracing:opentracing-util:0.33.0")
    implementation("io.opentracing:opentracing-noop:0.33.0")
    implementation("com.googlecode.json-simple:json-simple:1.1.1") {
        exclude group: 'junit'
    }

    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")

    jmh "io.opentracing:opentracing-mock:0.33.0"
}

jar {
    from("README.md")
    from("LICENSE")

    manifest {
        attributes "Implementation-Title": "New Relic OpenTracing Lambda Tracer",
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "New Relic, Inc",
                "Created-By": "New Relic, Inc",
                "Built-Date": new Date(),
                "Specification-Version": project.version,
                "Build-Id": System.getProperty("BUILD_ID") || "None"
    }
}

tasks.withType(GenerateModuleMetadata.class) {
    enabled = false
}

publishing {
    repositories {
        maven {
            def releasesRepoUrl = uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/")
            def snapshotsRepoUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv("SONATYPE_USERNAME")
                password = System.getenv("SONATYPE_PASSWORD")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = "New Relic OpenTracing Lambda Tracer"
                description = "New Relic OpenTracing Tracer implementation for instrumenting AWS Lambda functions."
                url = "https://github.com/newrelic/newrelic-lambda-tracer-java"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        distribution = "repo"
                    }
                }
                developers {
                    developer {
                        id = "newrelic"
                        name = "New Relic"
                        email = "opensource@newrelic.com"
                    }
                }
                scm {
                    url = "git@github.com:newrelic/newrelic-lambda-tracer-java.git"
                    connection = "scm:git@github.com:newrelic/newrelic-lambda-tracer-java.git"
                }
            }
        }

    }
}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    setRequired({ gradle.taskGraph.hasTask("uploadArchives") })
    sign publishing.publications["mavenJava"]
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    environment "NEW_RELIC_ACCOUNT_ID", "account"
    environment "NEW_RELIC_TRUSTED_ACCOUNT_KEY", "trustKey"
    environment "NEW_RELIC_PRIMARY_APPLICATION_ID", "primaryApp"
}

jmh {
    jmhVersion = "1.21"
    jvmArgs = ["-server"]
    fork = 1
    iterations = 1
    warmupIterations = 1
    duplicateClassesStrategy = DuplicatesStrategy.WARN // see why: https://github.com/melix/jmh-gradle-plugin#duplicate-dependencies-and-classes
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt")
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt")
}
